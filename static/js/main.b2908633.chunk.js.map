{"version":3,"sources":["components/InformationCard.js","components/SearchInput.js","utilis/helper.js","App.js","serviceWorker.js","index.js","assets/search-solid.svg"],"names":["InformationCard","props","measurements","airQualityInfo","react_default","a","createElement","className","onClick","removeCard","dist_default","fromNow","lastUpdated","to","city","location","country","map","parameter","index","key","toUpperCase","length","value","concat","SearchInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","inputValue","target","toLowerCase","capitalizedInput","suggestions","state","apiData","filter","cityData","startsWith","setState","noResults","showSuggestions","preventDefault","handleSelect","innerHTML","trim","cityInfo","id","Math","random","toString","substring","fetch","then","response","json","results","selectedCities","toConsumableArray","newState","_this2","_this3","onChange","src","searchIcon","alt","type","placeholder","suggestion","class","components_InformationCard","Component","App","components_SearchInput","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b2908633.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Moment from 'react-moment';\r\n\r\nfunction InformationCard(props) {\r\n    const measurements = props.airQualityInfo.measurements;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n     <span className=\"close\" onClick={props.removeCard}></span>\r\n     <p className='updated-time'>Updated <Moment fromNow>{props.lastUpdated.to}</Moment> </p>\r\n      <p className='city'>{props.airQualityInfo.city}</p>\r\n      <p className='location'>\r\n        In {props.airQualityInfo.location}, {props.airQualityInfo.country === 'GB' ? 'United Kingdom' : null}\r\n      </p>\r\n      <strong >\r\n       <span className='values-text'>Values:</span>\r\n       {props.airQualityInfo\r\n        ? measurements.map( (parameter, index) => (\r\n              <span className='parameters' key={index}>\r\n                 {parameter.parameter.toUpperCase()}: {index === measurements.length - 1 ? parameter.value :  `${parameter.value}, `}\r\n              </span>\r\n          ))\r\n        : null}\r\n        </strong>\r\n    </div>\r\n  );\r\n}\r\nexport default InformationCard;\r\n","import React , { Component } from 'react';\r\nimport InformationCard from './InformationCard';\r\nimport { generateID } from '../utilis/helper'\r\nimport searchIcon from '../assets/search-solid.svg'\r\n\r\nclass SearchInput extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            inputValue:'',\r\n            apiData:[],\r\n            showSuggestions:false,\r\n            suggestions:[],\r\n            selectedCities:[],\r\n            noResults:false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.openaq.org/v1/cities?country=GB&limit=200')\r\n        .then(response => response.json())\r\n        .then(json => this.setState({apiData:json.results}))\r\n    }\r\n\r\n    handleChange = (e) => {\r\n      const inputValue = e.target.value.toLowerCase();\r\n      const capitalizedInput = e.target.value\r\n      let suggestions = this.state.apiData.filter((cityData) => cityData.city.toLowerCase().startsWith(inputValue) )\r\n      if(inputValue === '' || inputValue === ' ') {\r\n          suggestions = []\r\n      }\r\n      suggestions.length === 0 && inputValue !==''\r\n        ? this.setState({suggestions:suggestions, inputValue:capitalizedInput , noResults:true })\r\n        : this.setState({suggestions:suggestions, inputValue:capitalizedInput , noResults:false, showSuggestions:true})\r\n      e.preventDefault();\r\n    }\r\n\r\n    handleSelect = (e) => {\r\n        const city = e.target.innerHTML.trim();\r\n        const cityInfo = {\r\n            airQualityInfo:null,\r\n            lastUpdated:null,\r\n            id:generateID()\r\n        }\r\n\r\n        //get Air Quality Data and Last Updated info\r\n        fetch(`https://api.openaq.org/v1/latest?country=GB&city=${city}`)\r\n        .then(response => response.json())\r\n        .then(json => cityInfo.airQualityInfo = json.results[0])\r\n        .then(() =>\r\n            fetch(`https://api.openaq.org/v1/locations?country=GB&city=${city}`)\r\n            .then(response => response.json())\r\n            .then(json => cityInfo.lastUpdated = json.results[0].lastUpdated )\r\n            .then( () =>\r\n                //set the state\r\n                this.setState((state) => ({\r\n                    selectedCities: [...state.selectedCities, cityInfo],\r\n                    inputValue: city,\r\n                    showSuggestions:false\r\n            })))\r\n\r\n        )\r\n    }\r\n   removeCard = (id) => {\r\n        const newState =  this.state.selectedCities.filter((city) => city.id !== id )\r\n        this.setState({\r\n            selectedCities:newState\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='input-container'>\r\n            <form  className='input-form'\r\n              onChange={this.handleChange}>\r\n                <img className='search-icon' src={searchIcon} alt='search icon'/>\r\n                <input type='text'\r\n                className='search-input'\r\n                value={this.state.inputValue}\r\n                placeholder=\"Enter city name...\"/>\r\n            </form>\r\n                <ul className=\"suggestions-container\" id='style-1'>\r\n                    { this.state.showSuggestions\r\n                    ? this.state.suggestions.map((suggestion, index) => (\r\n                        <li className=\"suggestion-element\"\r\n                            onClick={this.handleSelect}\r\n                            key={index}>\r\n                            {suggestion.city}\r\n                        </li>\r\n                        ))\r\n                    : null\r\n                    }\r\n                </ul>\r\n\r\n                {this.state.noResults\r\n                ? <p className='error-msg'>Sorry, we do not have any results for your query</p>\r\n                : null }\r\n\r\n                <div class='cards-container'>\r\n                    { this.state.selectedCities.length > 0\r\n                    ? this.state.selectedCities.map((city) =>\r\n                    (<InformationCard\r\n                        key={city.id}\r\n                        removeCard={()=>this.removeCard(city.id)}\r\n                        lastUpdated={city.lastUpdated}\r\n                        airQualityInfo={city.airQualityInfo}/>)\r\n                    )\r\n                    : null\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchInput;\r\n","export function generateID () {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n  }","import React from 'react';\nimport './App.css';\nimport SearchInput from './components/SearchInput'\n\nfunction App() {\n  return (\n    <div >\n      <h1 className='title'>Compare your Air</h1>\n      <p className='headline'>\n         Compare the air quality between cities in the UK.<br/>\n         Select cities to compare using the search tool below.\n      </p>\n      <SearchInput/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/search-solid.c6a0effb.svg\";"],"sourceRoot":""}